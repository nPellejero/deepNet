name: "VGG_CNN_M_2048"

layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "/home/npellejero/tesis/AMFED/redes/txtFiles/webface/train/data_a/"
    batch_size: 128
   	backend:LMDB
  }
  include {
    phase: TRAIN
  }

}
layer {
  name: "data_p"
  type: "Data"
  top: "data_p"
  top: "label_p"
  data_param {
   	backend:LMDB
		source: "/home/npellejero/tesis/AMFED/redes/txtFiles/webface/train/data_b/"
    batch_size: 128
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "/home/npellejero/tesis/AMFED/redes/txtFiles/webface/test/data_a/"
    batch_size: 128
   	backend:LMDB

  } 
 include {
    phase: TEST
  }
}
layer {
  name: "data_p"
  type: "Data"
  top: "data_p"
  top: "label_p"
  data_param {
   	backend:LMDB
		source: "/home/npellejero/tesis/AMFED/redes/txtFiles/webface/test/data_b/"
    batch_size: 128
  }
  include {
    phase: TEST
  }
}
layer {
  name: "a_b_to_same_not_same_label"
  type: "Python"
  bottom: "label"
  bottom: "label_p"
  top: "same_not_same"
  python_param { 
    # the module name -- usually the filename -- that needs to be in $PYTHONPATH
    module: "siamese"
    # the layer name -- the class name in the module
    layer: "SiameseLabels"
  }
  propagate_down: false
	propagate_down: false
}
layer {
  bottom: "data"
  top: "Bnorm1"
  name: "Bnorm1"
  type: "BatchNorm"
  batch_norm_param {
  use_global_stats: false
  }
  param {
  lr_mult: 0
   }
  param {
    lr_mult: 0
  }
  param {
  lr_mult: 0
  }
}
layer {
  bottom: "Bnorm1"
  top: "conv1"
  name: "conv1"
  type: "Convolution"
 param {
		name: "conv1_w"
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
		name: "conv1_b"
    lr_mult: 2.0
    decay_mult: 0.0
  }
  convolution_param {
      weight_filler {
      type: "gaussian"
     # type: "xavier"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
		num_output: 96
    kernel_size: 7
    stride: 2
  }
}
layer {
  bottom: "conv1"
  top: "conv1"
  name: "relu1"
  type: "ReLU"
}
layer {
  bottom: "conv1"
  top: "norm1"
  name: "norm1"
  type: "LRN"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  bottom: "norm1"
  top: "pool1"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool1"
  top: "Bnorm2"
  name: "Bnorm2"
  type: "BatchNorm"
  batch_norm_param {
  use_global_stats: false
  }
  param {
  lr_mult: 0
   }
  param {
    lr_mult: 0
  }
  param {
  lr_mult: 0
  }
}

layer {
  bottom: "Bnorm2"
  top: "conv2"
  name: "conv2"
  type: "Convolution"
 param {
  	name: "conv2_w"
	  lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
		name: "conv2_b"
    lr_mult: 2.0
    decay_mult: 0.0
  }
  convolution_param {
      weight_filler {
      type: "gaussian"
     # type: "xavier"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
    num_output: 256
    pad: 1
    kernel_size: 5
    stride: 2
  }
}
layer {
  bottom: "conv2"
  top: "conv2"
  name: "relu2"
  type: "ReLU"
}
layer {
  bottom: "conv2"
  top: "norm2"
  name: "norm2"
  type: "LRN"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  bottom: "norm2"
  top: "pool2"
  name: "pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool2"
  top: "Bnorm3"
  name: "Bnorm3"
  type: "BatchNorm"
  batch_norm_param {
  use_global_stats: false
  }
  param {
  lr_mult: 0
   }
  param {
    lr_mult: 0
  }
  param {
  lr_mult: 0
  }
}

layer {
  bottom: "Bnorm3"
  top: "conv3"
  name: "conv3"
  type: "Convolution"
 param {
  	name: "conv3_w"
	  lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
   	 name: "conv3_b"
		 lr_mult: 2.0
    decay_mult: 0.0
  }
  convolution_param {
     weight_filler {
      type: "gaussian"
     # type: "xavier"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3"
  top: "conv3"
  name: "relu3"
  type: "ReLU"
}
layer {
  bottom: "conv3"
  top: "conv4"
  name: "conv4"
  type: "Convolution"
 param {
    name: "conv4_w"
		lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
		name: "conv4_b"	
    lr_mult: 2.0
    decay_mult: 0.0
  }
  convolution_param {
    weight_filler {
      type: "gaussian"
     # type: "xavier"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4"
  top: "conv4"
  name: "relu4"
  type: "ReLU"
}
layer {
  bottom: "conv4"
  top: "conv5"
  name: "conv5"
  type: "Convolution"
 param {
		name: "conv5_w"
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
		name: "conv5_b"
    lr_mult: 2.0
    decay_mult: 0.0
  }
  convolution_param {
      weight_filler {
      type: "gaussian"
     # type: "xavier"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5"
  top: "conv5"
  name: "relu5"
  type: "ReLU"
}
layer {
  bottom: "conv5"
  top: "pool5"
  name: "pool5"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool5"
  top: "Bnorm4"
  name: "Bnorm4"
  type: "BatchNorm"
  batch_norm_param {
  use_global_stats: false
  }
  param {
  lr_mult: 0
   }
  param {
    lr_mult: 0
  }
  param {
  lr_mult: 0
  }
}

layer {
  bottom: "Bnorm4"
  top: "fc8_n"
  name: "fc8_n"
  type: "InnerProduct"
  param {
    name: "fc8_n_w"
    lr_mult: 1
  }
  param {
    name: "fc8_n_b"
    lr_mult: 2
  }
    inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }  
}
layer {
  name: "feat"
  type: "InnerProduct"
  bottom: "fc8_n"
  top: "feat"
  param {
    name: "feat_w"
    lr_mult: 1
  }
  param {
    name: "feat_b"
    lr_mult: 2
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  bottom: "data_p"
  top: "Bnorm1_p"
  name: "Bnorm1_p"
  type: "BatchNorm"
  batch_norm_param {
  use_global_stats: false
  }
  param {
  lr_mult: 0
   }
  param {
    lr_mult: 0
  }
  param {
  lr_mult: 0
  }
}
layer {
  bottom: "Bnorm1_p"
  top: "conv1_p"
  name: "conv1_p"
  type: "Convolution"
 param {
		name: "conv1_w"
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
		name: "conv1_b"
    lr_mult: 2.0
    decay_mult: 0.0
  }
  convolution_param {
      weight_filler {
      type: "gaussian"
     # type: "xavier"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
		num_output: 96
    kernel_size: 7
    stride: 2
  }
}
layer {
  bottom: "conv1_p"
  top: "conv1_p"
  name: "relu1_p"
  type: "ReLU"
}
layer {
  bottom: "conv1_p"
  top: "norm1_p"
  name: "norm1_p"
  type: "LRN"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  bottom: "norm1_p"
  top: "pool1_p"
  name: "pool1_p"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool1_p"
  top: "Bnorm2_p"
  name: "Bnorm2_p"
  type: "BatchNorm"
  batch_norm_param {
  use_global_stats: false
  }
  param {
  lr_mult: 0
   }
  param {
    lr_mult: 0
  }
  param {
  lr_mult: 0
  }
}

layer {
  bottom: "Bnorm2_p"
  top: "conv2_p"
  name: "conv2_p"
  type: "Convolution"
 param {
  	name: "conv2_w"
	  lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
		name: "conv2_b"
    lr_mult: 2.0
    decay_mult: 0.0
  }
  convolution_param {
      weight_filler {
      type: "gaussian"
     # type: "xavier"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
    num_output: 256
    pad: 1
    kernel_size: 5
    stride: 2
  }
}
layer {
  bottom: "conv2_p"
  top: "conv2_p"
  name: "relu2_p"
  type: "ReLU"
}
layer {
  bottom: "conv2_p"
  top: "norm2_p"
  name: "norm2_p"
  type: "LRN"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  bottom: "norm2_p"
  top: "pool2_p"
  name: "pool2_p"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool2_p"
  top: "Bnorm3_p"
  name: "Bnorm3_p"
  type: "BatchNorm"
  batch_norm_param {
  use_global_stats: false
  }
  param {
  lr_mult: 0
   }
  param {
    lr_mult: 0
  }
  param {
  lr_mult: 0
  }
}

layer {
  bottom: "Bnorm3_p"
  top: "conv3_p"
  name: "conv3_p"
  type: "Convolution"
 param {
  	name: "conv3_w"
	  lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
   	 name: "conv3_b"
		 lr_mult: 2.0
    decay_mult: 0.0
  }
  convolution_param {
     weight_filler {
      type: "gaussian"
     # type: "xavier"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_p"
  top: "conv3_p"
  name: "relu3_p"
  type: "ReLU"
}
layer {
  bottom: "conv3_p"
  top: "conv4_p"
  name: "conv4_p"
  type: "Convolution"
 param {
    name: "conv4_w"
		lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
		name: "conv4_b"	
    lr_mult: 2.0
    decay_mult: 0.0
  }
  convolution_param {
    weight_filler {
      type: "gaussian"
     # type: "xavier"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_p"
  top: "conv4_p"
  name: "relu4_p"
  type: "ReLU"
}
layer {
  bottom: "conv4_p"
  top: "conv5_p"
  name: "conv5_p"
  type: "Convolution"
 param {
		name: "conv5_w"
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
		name: "conv5_b"
    lr_mult: 2.0
    decay_mult: 0.0
  }
  convolution_param {
      weight_filler {
      type: "gaussian"
     # type: "xavier"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_p"
  top: "conv5_p"
  name: "relu5_p"
  type: "ReLU"
}
layer {
  bottom: "conv5_p"
  top: "pool5_p"
  name: "pool5_p"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool5_p"
  top: "Bnorm4_p"
  name: "Bnorm4_p"
  type: "BatchNorm"
  batch_norm_param {
  use_global_stats: false
  }
  param {
  lr_mult: 0
   }
  param {
    lr_mult: 0
  }
  param {
  lr_mult: 0
  }
}

layer {
  bottom: "Bnorm4_p"
  top: "fc8_n_p"
  name: "fc8_n_p"
  type: "InnerProduct"
  param {
    name: "fc8_n_w"
    lr_mult: 1
  }
  param {
    name: "fc8_n_b"
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  } 
}
layer {
  name: "feat_p"
  type: "InnerProduct"
  bottom: "fc8_n_p"
  top: "feat_p"
  param {
    name: "feat_w"
    lr_mult: 1
  }
  param {
    name: "feat_b"
    lr_mult: 2
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
#layer {
#  name: "a_b_to_same_not_same_label"
#  type: "Python"
#  bottom: "feat_b"
#  bottom: "label_p"
#  top: "same_not_same"
#  python_param { 
    # the module name -- usually the filename -- that needs to be in $PYTHONPATH
#    module: "siamese"
    # the layer name -- the class name in the module
#    layer: "SiameseLabels"
#  }
#  propagate_down: false
#	propagate_down: false
#}

layer {
  name: "loss"
  type: "ContrastiveLoss"
  bottom: "feat"
  bottom: "feat_p"
  bottom: "same_not_same"
  top: "loss"
  contrastive_loss_param {
    margin: 1
  }
}
